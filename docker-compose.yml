version: '3'

networks:
  my-net:
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
        # - gateway: 10.100.20.1

services:

  # mysql:
  #   # 不指定env_file默认也是.env
  #   # env_file:
  #   #   - .env
  #   # 此处以container模式设置网络，此模式下msyql与php服务使用同一个网卡，以实现localhost/127.0.0.1内循环
  #   # 此模式下不可与ports端口转发参数共同使用
  #   # network_mode: "service:php"
  #   image: mysql:${MYSQL_VERSION}
  #   container_name: lnmpr-mysql
  #   volumes:
  #     - ./mysql/data:/var/lib/mysql
  #   ports:
  #     - ${MYSQL_PORT_LOCAL}:${MYSQL_PORT_DOCKER}
  #   environment:
  #     MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
  #   command:
  #     - mysqld
  #     - --character-set-server=utf8mb4
  #     - --default-authentication-plugin=mysql_native_password

  # redis:
  #   # network_mode: "service:php"
  #   env_file:
  #     - .env
  #   image: redis:${REDIS_VERSION}
  #   container_name: lnmpr-redis
  #   ports:
  #     - ${REDIS_PORT_LOCAL}:${REDIS_PORT_DOCKER}

  php:
    # image: php:${PHP_VERSION}
    build:
      context: ./php
      dockerfile: Dockerfile
      args:
        php_version: ${PHP_VERSION}
    container_name: lnmpr-php
    volumes:
      # - ${PHP_WORK_DIR_LOCAL}:${PHP_WORK_DIR_DOCKER}
      - ./nginx:/usr/share/nginx/html
      - ./php/config/my-php.ini:/usr/local/etc/php/conf.d/my-php.ini
      - ./php/config/my-fpm.conf:/usr/local/etc/php-fpm.d/my-fpm.conf
    ports:
      - ${PHP_PORT_LOCAL}:${PHP_PORT_DOCKER}
    networks:
      - my-net
    # DNS配置默认是53端口，如果自己设置DNS服务器，需要开放53/udp端口
    dns:
      - 172.28.0.89

  # nginx:
  #   image: nginx:${NGINX_VERSION}
  #   container_name: lnmpr-nginx
  #   volumes:
  #     - ${NGINX_WORK_DIR_LOCAL}:${NGINX_WORK_DIR_DOCKER}
  #     - ${NGINX_CONF_LOCAL}:${NGINX_CONF_DOCKER}
  #     - ${NGINX_CONF_D_LOCAL}:${NGINX_CONF_D_DOCKER}
  #     - ./nginx/logs:/var/log/nginx
  #   ports:
  #     - ${NGINX_PORT_LOCAL}:${NGINX_PORT_DOCKER}

  # nginx-1:
  #   image: nginx:${NGINX_VERSION}
  #   # 在做为负载均服务的客户端时(指在nginx配置文件upstream中出现)时
  #   # 需要定义hostname
  #   # 否则负载均衡服务器在默认bridge网络模式下
  #   # 会向宿主机寻找域名解析，读取到宿主机的/etc/hosts文件后
  #   # 发现是127.0.0.1，负载均衡服务器会在自身寻找这个服务，当然是找不到的
  #   # hostname: one.com
  #   volumes:
  #     - ./nginx/conf.d:${NGINX_CONF_D_DOCKER}
  #     - ./nginx:/usr/share/nginx/html
  #     # - ${NGINX_WORK_DIR_LOCAL}:${NGINX_WORK_DIR_DOCKER}
  #     # - ./nginx-one/conf.d:${NGINX_CONF_D_DOCKER}
  #     # - ./nginx-one/logs:/var/log/nginx
  #   ports:
  #     - 81:80

  nginx-2:
    image: nginx:${NGINX_VERSION}
    volumes:
      - ./nginx/conf.d:${NGINX_CONF_D_DOCKER}
      - ./nginx:/usr/share/nginx/html
      - ./dig.tgz:/dig.tgz
    ports:
      - 82:80
    networks:
      my-net:
        ipv4_address: 172.28.0.12

  nginx-3:
    image: nginx:${NGINX_VERSION}
    volumes:
      - ./nginx/conf.d:${NGINX_CONF_D_DOCKER}
      - ./nginx:/usr/share/nginx/html
    ports:
      - 83:80
    networks:
      my-net:
        ipv4_address: 172.28.0.13

  nginx-4:
    image: nginx:${NGINX_VERSION}
    volumes:
      - ./nginx/conf.d:${NGINX_CONF_D_DOCKER}
      - ./nginx:/usr/share/nginx/html
    ports:
      - 84:80
    networks:
      my-net:
        ipv4_address: 172.28.0.14

  # nginx-5:
  #   image: nginx:${NGINX_VERSION}
  #   volumes:
  #     - ./nginx/conf.d:${NGINX_CONF_D_DOCKER}
  #     - ./nginx:/usr/share/nginx/html
  #   ports:
  #     - 85:80

  # nginx-6:
  #   image: nginx:${NGINX_VERSION}
  #   volumes:
  #     - ./nginx/conf.d:${NGINX_CONF_D_DOCKER}
  #     - ./nginx:/usr/share/nginx/html
  #   ports:
  #     - 86:80

  ###########################################################
  #
  # Kong API网关管理系统，基于Nginx+Lua二次开发的应用程序
  #
  ###########################################################

  postgres:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: 123456
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      my-net:
        ipv4_address: 172.28.0.88

  kong-migration:
    image: kong
    command: kong migrations bootstrap
    container_name: kong-migration
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: 123456
    depends_on:
      - postgres
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
    networks:
      - my-net


  # 这里需要先执行kong-migration容器的数据库初始化命令
  # 才可以正常启动Kong
  kong:
    image: kong
    container_name: kong
    environment:
      # 使用无数据库模式，配置信息将存储在文件中
      # KONG_DATABASE: 'off'
      KONG_DATABASE: postgres
      KONG_PG_HOST: 172.28.0.88
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: 123456
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      # KONG_DNS_RESOLVER: 172.21.0.10
    ports:
      - 8000:8000
      - 8001:8001
      - 8443:8443
      - 8444:8444
    volumes:
      - ./kong/config/kong.conf:/etc/kong/kong.conf
    depends_on:
      - postgres
    # 因为需要提前执行migration，所以要一直重启到数据库初始化成功
    restart: on-failure:5
    networks:
      - my-net
  ###############################################################
  #
  # konga-migration:
  #   image: pantsel/konga
  #   container_name: konga-migration
  #   command: prepare
  #   environment:
  #     ADAPTER: postgres
  #     # CONNECTION_URI: postgresql://用户名:密码@ip:(prot默认是5432)5432/数据库名字
  #     CONNECTION_URI: postgresql://kong:123456@postgres:5432/konga
  #   depends_on:
  #     - postgres
  #   networks:
  #     - my-net
  ###############################################################

  # Kong 网关配置后台管理页面
  # 用Consul服务实现动态DNS解析时
  # 需要将Service->Host设置为Consul中注册的服务名({your-service-name}.service.consul)
  # Konga 前端不支持psql 12以上，或许只能用psql 9.6的版本才行了
  konga:
    image: pantsel/konga
    container_name: konga
    volumes:
      - ./konga/data:/app/kongadata
    ports:
      - 1337:1337
    depends_on:
      - postgres
    restart: on-failure:5
    networks:
      - my-net



  ###########################################################
  #
  # grafana 前端数据展示图表，支持多数据库查询
  #
  # 1.机器运行情况面板插件:https://grafana.com/grafana/dashboards/8919
  # 2.Kong网关运行情况面板插件:https://grafana.com/grafana/dashboards/7424
  #
  ###########################################################

  # grafana:
  #   image: grafana/grafana
  #   container_name: grafana
  #   ports:
  #     - 3000:3000

  # # 【普罗米修斯】数据库
  # prometheus:
  #   image: prom/prometheus
  #   container_name: prometheus
  #   hostname: prometheus
  #   ports:
  #     - 9090:9090
  #   volumes:
  #     - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  # prometheus-exporter:
  #   image: prom/node-exporter
  #   container_name: prometheus-exporter
  #   hostname: prometheus-exporter
  #   ports:
  #     - 9100:9100


  ###########################################################
  #
  # Consul 服务注册与服务发现系统
  #
  ###########################################################


  consul-server-one:
    image: consul:latest
    hostname: consul-server-1
    ports:
      - 8500:8500
    volumes:
      - ./consul/config:/consul/config
      - ./consul/data1:/consul/data
    # consule 参数描述参考:https://www.cnblogs.com/harrychinese/p/consul_cluster.html
    # -bootstrap 表示在 datacenter 中只能有一个 server 处于 bootstrap 模式并使自己成为 leader 角色, 该参数不能和 bootstrap-expect 参数公用.
    # -bootstrap-expect=<int> 表明该 datacenter 中期望的引导节点个数,当设定该参数后, consul 直到 server 数量到达该设定值后, 才会引导整个集群,该标记不能和 bootstrap 共用, 引导节点不需要太多, 1 到 3 个就可以了.
    # -dns-port 指定提供DNS域名解析服务的端口
    networks:
      my-net:
        ipv4_address: 172.28.0.89


  # consul-server-two:
  #   image: consul:latest
  #   hostname: consul-server-2
  #   ports:
  #     - 8501:8500
  #   volumes:
  #     - ./consul/data2:/consul/data
  #   command: "agent -server -ui -join consul-server-one -client 0.0.0.0"
  #   depends_on:
  #     - consul-server-one

  # consul-server-three:
  #   image: consul:latest
  #   hostname: consul-server-3
  #   ports:
  #     - 8502:8500
  #   volumes:
  #     - ./consul/data3:/consul/data
  #   command: "agent -server -ui -join consul-server-one -client 0.0.0.0"
  #   depends_on:
  #     - consul-server-one

  ###########################################################
  # 1.加入集群
  #
  # 进入容器，手动执行:
  # consul join docker-lnmpr_consul-node-one_1 docker-lnmpr_consul-node-two_1
  # 将 container name 为 docker-lnmpr_consul-node-one_1 的服务注册到 container name 为 docker-lnmpr_consul-node-two_1 的集群中
  #
  # 也可以使用服务名称:
  # consul join consul-node-one consul-node-two
  # node-two 可以是集群中的任何一个节点(server/clinet)
  #
  #
  # 2.关闭节点
  #
  # 进入需要关闭的节点容器，手动执行:
  # consul leave
  # 此命令会通知其他节点，然后离开集群，并关机
  #
  #
  # 3.关闭其他节点
  #
  # 登录任何一个节点，可强制关闭其他节点:
  # consul leave -http-addr=172.21.0.11:8500
  #
  ###########################################################

  # consul-node-one:
  #   image: consul:latest
  #   hostname: consul-node-1
  #   command: "agent"
  #   depends_on:
  #     - consul-server-one

  # consul-node-two:
  #   image: consul:latest
  #   hostname: consul-node-2
  #   command: "agent -join consul-server-one"
  #   depends_on:
  #     - consul-server-one

  consul-node-three:
    image: consul:latest
    hostname: consul-node-3
    command: "agent -join consul-server-one"
    volumes:
      - ./consul/config_3:/consul/config
    depends_on:
      - consul-server-one
    networks:
      - my-net

