version: '3'

networks:
  kong-net:
    external: false

services:

  mysql:
    # 不指定env_file默认也是.env
    # env_file:
    #   - .env
    # 此处以container模式设置网络，此模式下msyql与php服务使用同一个网卡，以实现localhost/127.0.0.1内循环
    # 此模式下不可与ports端口转发参数共同使用
    # network_mode: "service:php"
    image: mysql:${MYSQL_VERSION}
    container_name: lnmpr-mysql
    volumes:
      - ./mysql/data:/var/lib/mysql
    ports:
      - ${MYSQL_PORT_LOCAL}:${MYSQL_PORT_DOCKER}
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    command:
      - mysqld
      - --character-set-server=utf8mb4
      - --default-authentication-plugin=mysql_native_password

  redis:
    # network_mode: "service:php"
    env_file:
      - .env
    image: redis:${REDIS_VERSION}
    container_name: lnmpr-redis
    ports:
      - ${REDIS_PORT_LOCAL}:${REDIS_PORT_DOCKER}

  php:
    # image: php:${PHP_VERSION}
    build: 
      context: ./php
      dockerfile: Dockerfile
      args:
        php_version: ${PHP_VERSION}
    container_name: lnmpr-php
    volumes:
      - ${PHP_WORK_DIR_LOCAL}:${PHP_WORK_DIR_DOCKER}
    ports:
      - ${PHP_PORT_LOCAL}:${PHP_PORT_DOCKER}

  nginx:
    image: nginx:${NGINX_VERSION}
    container_name: lnmpr-nginx
    volumes:
      - ${NGINX_WORK_DIR_LOCAL}:${NGINX_WORK_DIR_DOCKER}
      - ${NGINX_CONF_LOCAL}:${NGINX_CONF_DOCKER}
      - ${NGINX_CONF_D_LOCAL}:${NGINX_CONF_D_DOCKER}
      - ./nginx/logs:/var/log/nginx
    ports:
      - ${NGINX_PORT_LOCAL}:${NGINX_PORT_DOCKER}

  nginx-one:
    image: nginx:${NGINX_VERSION}
    container_name: lnmpr-nginx-one
    # 在做为负载均服务的客户端时(指在nginx配置文件upstream中出现)时
    # 需要定义hostname
    # 否则负载均衡服务器在默认bridge网络模式下
    # 会向宿主机寻找域名解析，读取到宿主机的/etc/hosts文件后
    # 发现是127.0.0.1，负载均衡服务器会在自身寻找这个服务，当然是找不到的
    hostname: one.com
    volumes:
      - ${NGINX_WORK_DIR_LOCAL}:${NGINX_WORK_DIR_DOCKER}
      - ./nginx-one/conf.d:${NGINX_CONF_D_DOCKER}
      - ./nginx-one/logs:/var/log/nginx
    ports:
      - 81:81

  nginx-two:
    image: nginx:${NGINX_VERSION}
    container_name: lnmpr-nginx-two
    hostname: two.com
    volumes:
      - ${NGINX_WORK_DIR_LOCAL}:${NGINX_WORK_DIR_DOCKER}
      - ./nginx-two/conf.d:${NGINX_CONF_D_DOCKER}
      - ./nginx-two/logs:/var/log/nginx
    ports:
      - 82:82



  ###########################################################
  #
  # Kong API网关管理系统，基于Nginx+Lua二次开发的应用程序
  #
  # #########################################################

  # kong-database:
  #   image: postgres
  #   container_name: kong-database
  #   networks:
  #     - kong-net
  #   environment:
  #     POSTGRES_USER: kong
  #     POSTGRES_DB: kong
  #     POSTGRES_PASSWORD: 123456
  #   ports:
  #     - 5432:5432

  # kong-migration:
  #   image: kong
  #   command: kong migrations bootstrap
  #   container_name: kong-migration
  #   networks:
  #     - kong-net
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_HOST: kong-database
  #     KONG_PG_DATABASE: kong
  #     KONG_PG_USER: kong
  #     KONG_PG_PASSWORD: 123456
  #   depends_on:
  #     - kong-database

  # kong:
  #   image: kong
  #   container_name: kong
  #   networks:
  #     - kong-net
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_HOST: kong-database
  #     KONG_PG_DATABASE: kong
  #     KONG_PG_USER: kong
  #     KONG_PG_PASSWORD: 123456
  #     KONG_PROXY_LISTEN: 0.0.0.0:8000
  #     KONG_ADMIN_LISTEN: 0.0.0.0:8001
  #   ports:
  #     - 8000:8000
  #     - 8001:8001
  #     - 8443:8443
  #     - 8444:8444
  #   depends_on:
  #     # 这里需要先执行kong-migration容器的数据库初始化命令
  #     # - kong-migration
  #     - kong-database

  # konga:
  #   image: pantsel/konga
  #   container_name: konga
  #   networks:
  #       - kong-net
  #   environment:
  #     # DB_ADAPTER: postgres
  #     # DB_HOST: kong-database
  #     # DB_PORT: 5432
  #     # DB_USER: kong
  #     # DB_PASSWORD: 123456
  #     # DB_DATABASE: kong
  #     # DB_URI: postgresql://kong:${KONG_PG_PASSWORD:-kong}@kong-database:5432/konga
  #     DB_URI: postgresql://kong:123456@kong:5432/konga
  #     # NODE_ENV: development
  #   depends_on:
  #     - kong-database
  #   ports:
  #     - 1337:1337


  ###########################################################
  #
  # Consul 服务注册与服务发现集群
  #
  # #########################################################


  # consul-server-one:
  #   image: consul:latest
  #   hostname: consul-server-1
  #   ports:
  #     - 8500:8500
  #   volumes:
  #     - ./consul/data1:/consul/data
  #   # consule 参数描述参考:https://www.cnblogs.com/harrychinese/p/consul_cluster.html
  #   # -bootstrap 表示在 datacenter 中只能有一个 server 处于 bootstrap 模式并使自己成为 leader 角色, 该参数不能和 bootstrap-expect 参数公用.
  #   # -bootstrap-expect=<int> 表明该 datacenter 中期望的引导节点个数,当设定该参数后, consul 直到 server 数量到达该设定值后, 才会引导整个集群,该标记不能和 bootstrap 共用, 引导节点不需要太多, 1 到 3 个就可以了.
  #   command: "agent -server -bootstrap -ui -client 0.0.0.0"

  # consul-server-two:
  #   image: consul:latest
  #   hostname: consul-server-2
  #   ports:
  #     - 8501:8500
  #   volumes:
  #     - ./consul/data2:/consul/data
  #   command: "agent -server -ui -join consul-server-one -client 0.0.0.0"
  #   depends_on:
  #     - consul-server-one

  # consul-server3:
  #   image: consul:latest
  #   hostname: consul-server-three
  #   ports:
  #     - 8502:8500
  #   volumes:
  #     - ./consul/data3:/consul/data
  #   command: "agent -server -ui -join consul-server-one -client 0.0.0.0"
  #   depends_on:
  #     - consul-server-one

  # consul-node-one:
  #   image: consul:latest
  #   hostname: consul-node-1
  #   command: "agent"
  #   depends_on:
  #     - consul-server-one

  # consul-node-two:
  #   image: consul:latest
  #   hostname: consul-node-2
  #   command: "agent -join consul-server-one"
  #   depends_on:
  #     - consul-server-one


  # consul-server-one:
  #   image: consul:latest
  #   container_name: consul-server-one
  #   hostname: consul-server1
  #   # 容器内默认监听8500端口
  #   ports:
  #     - 1111:8500
  #   command: "agent -server -bootstrap-expect 3 -ui -client 0.0.0.0"

  # consul-server-two:
  #   image: consul:latest
  #   container_name: consul-server-two
  #   hostname: consul-server2
  #   # 容器内默认监听8500端口
  #   ports:
  #     - 1112:8500
  #   command: "agent -server -ui -client 0.0.0.0 -join consul-server-one"
  #   depends_on:
  #     - consul-server-one

  # consul-client-one:
  #   image: consul:latest
  #   container_name: consul-client-one
  #   hostname: consul-node1
  #   # 容器内默认监听8500端口
  #   ports:
  #     - 1113:8500
  #   command: "agent -ui -join consul-server-one"
  #   depends_on:
  #     - consul-server-one

  # consul-client-two:
  #   image: consul:latest
  #   container_name: consul-client-two
  #   hostname: consul-node2
  #   # 容器内默认监听8500端口
  #   ports:
  #     - 1114:8500
  #   command: "agent -ui -join consul-server-one"
  #   depends_on:
  #     - consul-server-one
